// Generated by CoffeeScript 1.10.0
(function() {
  var Dictionary, TRE_Node, TRE_Tree;

  Dictionary = (function() {
    function Dictionary() {
      this.keys = [];
      this.data = [];
    }

    Dictionary.prototype.add = function(key, data) {
      this.keys.push(key);
      return this.data.push(data);
    };

    Dictionary.prototype.get = function(key) {
      var i, j, ref;
      for (i = j = 0, ref = this.keys.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        if (this.keys[i] === key) {
          return this.data[i];
        }
      }
    };

    Dictionary.prototype.set = function(key, data) {
      var i, j, ref, results;
      results = [];
      for (i = j = 0, ref = this.keys.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        if (this.keys[i] === key) {
          results.push(this.data[i] = data);
        }
      }
      return results;
    };

    Dictionary.prototype.list_keys = function() {
      return this.keys;
    };

    return Dictionary;

  })();

  TRE_Node = (function() {
    function TRE_Node(name, qt) {
      var j, l, len, ref;
      this.name = name;
      this.qt = qt;
      this.next = new Dictionary;
      ref = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', "'", ' ', ','];
      for (j = 0, len = ref.length; j < len; j++) {
        l = ref[j];
        this.next.add(l, null);
      }
    }

    return TRE_Node;

  })();

  TRE_Tree = (function() {
    function TRE_Tree() {
      this.root = new TRE_Node("", -1);
    }

    TRE_Tree.prototype.get = function(card_name) {
      var actual, j, l, len, new_node;
      actual = this.root;
      for (j = 0, len = card_name.length; j < len; j++) {
        l = card_name[j];
        if (actual.next.get(l) == null) {
          new_node = new TRE_Node(actual.name + l, 0);
          actual.next.set(l, new_node);
        }
        actual = actual.next.get(l);
      }
      return actual;
    };

    TRE_Tree.prototype.set = function(card_name, card_qt) {
      return this.get(card_name).qt = card_qt;
    };

    TRE_Tree.prototype.add = function(card_name, card_qt) {
      console.log(card_name);
      return this.get(card_name).qt += card_qt;
    };

    TRE_Tree.prototype.remove = function(card_name, card_qt) {
      var aux;
      aux = this.get(card_name);
      aux.qt -= card_qt;
      if (aux.qt < 0) {
        return aux.qt = 0;
      }
    };

    TRE_Tree.prototype.list_r = function(current, sep) {
      var aux, c, e, j, k, len, len1, ref, result;
      if (current == null) {
        return [];
      }
      result = [];
      if (current.qt > 0) {
        result.push(current.name + sep + current.qt);
      }
      ref = current.next.list_keys();
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        aux = this.list_r(current.next.get(c), sep);
        for (k = 0, len1 = aux.length; k < len1; k++) {
          e = aux[k];
          result.push(e);
        }
      }
      return result;
    };

    TRE_Tree.prototype.list = function(card_prefix, sep, sp) {
      var actual, aux, e, j, len, ref;
      if (sp == null) {
        sp = ' ';
      }
      actual = this.get(card_prefix);
      aux = "";
      ref = this.list_r(actual, sp);
      for (j = 0, len = ref.length; j < len; j++) {
        e = ref[j];
        aux += e + sep;
      }
      return aux;
    };

    return TRE_Tree;

  })();


  /*
  ----------------------------------------
  HTML Controller
  ----------------------------------------
   */

  $(document).ready(function() {
    var add_button, add_button_click, display, load_button, login_button, login_button_click, name_field, remove_button, remove_button_click, save_button, socket, tree;
    tree = new TRE_Tree();
    socket = io();
    add_button = $("#add_button");
    remove_button = $("#remove_button");
    save_button = $("#save_button");
    load_button = $("#load_button");
    display = $("#collection_display");
    name_field = $("#card_name");
    login_button = $("#login_button");
    login_button_click = function() {
      var username;
      username = prompt("Type in your username", "username");
      $("#login").attr("logged_in", "true");
      return $("#login").attr("username", username);
    };
    login_button.on("click", login_button_click);
    add_button_click = function() {
      var card_name;
      card_name = name_field.val();
      console.log(card_name);
      tree.add(card_name, 1);
      return display.html(tree.list(name_field.val(), "<br>"));
    };
    remove_button_click = function() {
      var card_name;
      card_name = name_field.text;
      tree.remove(card_name, 1);
      return display.html(tree.list(name_field.val(), "<br>"));
    };
    add_button.on("click", add_button_click);
    remove_button.on("click", remove_button_click);
    save_button.on("click", function() {
      if ($("#login").attr("logged_in") !== "true") {
        login_button_click();
      }
      return socket.emit("save", tree.list('', ';', ','), $("#login").attr("username"));
    });
    load_button.on("click", function() {
      if ($("#login").attr("logged_in") !== "true") {
        login_button_click();
      }
      return socket.emit("load", $("#login").attr("username"));
    });
    name_field.on("keyup", function() {
      return display.html(tree.list(name_field.val(), "<br>"));
    });
    return socket.on("return_load", function(data) {
      var card, cards, j, len;
      (cards = data.split(';')).pop();
      for (j = 0, len = cards.length; j < len; j++) {
        card = cards[j];
        tree.set((card.split(',')[0]), parseInt(card.split(',')[1], 10));
      }
      return display.html(tree.list('', "<br>"));
    });
  });

}).call(this);
